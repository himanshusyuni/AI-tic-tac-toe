
int helper(vector<vector<vector<int>>> & dp,int i ,int back,int front,vector<int> & arr){
    int n=arr.size();
    if(i>=n && back==-1) return 0;
    if(i==n) return 5000;

    if(dp[i][back+1][front+1]!=-1) return dp[i][back+1][front+1];

    int ans=5000;
    ans=min(ans,1+helper(dp,i+1,back,max(front,min(arr[i]+i-1,n)),arr));

    if(back==-1 || (i-back+1)<=arr[i]){
        ans=min(ans,1+helper(dp,i+1,-1,front,arr));
    }

    if(front >= i){
        ans=min(ans,helper(dp,i+1,back,front,arr));
    }
    else{
        back = (back == -1)? i:back;
        ans=min(ans,helper(dp,i+1,back,front,arr));
    }
    return dp[i][back+1][front+1]=ans;
}
void solve() {
    int n;
    cin>>n;
    vector<int> arr(n);
    for(int i =0;i<n;i++){
        cin>>arr[i];
    }

    vector<vector<vector<int>>> dp(n,vector<vector<int>> (n+2,vector<int> (n+2,-1)));
    cout<<helper(dp,0,-1,-1,arr);
}
