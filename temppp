CREATE FUNCTION dbo.RemoveFirstCommaLogic (@input NVARCHAR(MAX))
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @result NVARCHAR(MAX) = ''
    DECLARE @points INT = 0
    DECLARE @i INT = 1
    DECLARE @len INT = LEN(@input)
    DECLARE @ch NCHAR(1)

    WHILE @i <= @len
    BEGIN
        SET @ch = SUBSTRING(@input, @i, 1)

        IF @ch = ',' AND @points = 0
        BEGIN
            -- skip this first comma before a point
        END
        ELSE 
        BEGIN
            SET @result += @ch

            IF @ch = ',' SET @points -= 1
            ELSE IF @ch = '.' SET @points += 1
        END

        SET @i += 1
    END

    RETURN @result
END;

SELECT 
    column_name,
    dbo.RemoveFirstCommaLogic(column_name) AS cleaned_column
FROM 
    your_table;




CREATE FUNCTION dbo.GetNewTotalTax
(
    @quantity NVARCHAR(MAX),
    @total_tax NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @cnt1 INT
    DECLARE @cnt2 INT
    DECLARE @newTotalTax NVARCHAR(MAX) = ''

    SET @cnt1 = LEN(@quantity) - LEN(REPLACE(@quantity, ',', '')) + 1
    SET @cnt2 = LEN(@total_tax) - LEN(REPLACE(@total_tax, ',', '')) + 1

    IF @cnt1 * 2 = @cnt2
    BEGIN
        DECLARE @xml XML
        SET @xml = CAST('<root><r>' + REPLACE(@total_tax, ',', '</r><r>') + '</r></root>' AS XML)

        ;WITH Split AS (
            SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS rn, t.value('.', 'NVARCHAR(MAX)') AS val
            FROM @xml.nodes('/root/r') AS x(t)
        )
        SELECT @newTotalTax = 
            CASE 
                WHEN EXISTS (
                    SELECT 1
                    FROM Split s1
                    JOIN Split s2 ON s1.rn = s2.rn - 1
                    WHERE s1.rn % 2 = 1 AND s1.val <> s2.val
                )
                THEN @total_tax
                ELSE 
                    STUFF((
                        SELECT ',' + CAST(CAST(s1.val AS FLOAT) + CAST(s2.val AS FLOAT) AS NVARCHAR)
                        FROM Split s1
                        JOIN Split s2 ON s1.rn = s2.rn - 1
                        WHERE s1.rn % 2 = 1
                        FOR XML PATH(''), TYPE
                    ).value('.', 'NVARCHAR(MAX)'), 1, 1, '')
            END
    END
    ELSE
    BEGIN
        SET @newTotalTax = @total_tax
    END

    RETURN @newTotalTax
END


SELECT 
    quantity, 
    total_tax, 
    dbo.GetNewTotalTax(quantity, total_tax) AS newTotalTax
FROM info1;




CREATE FUNCTION dbo.CheckInvoiceValid
(
    @quantity NVARCHAR(MAX),
    @net_product_value NVARCHAR(MAX),
    @total_tax NVARCHAR(MAX),
    @total_invoice_value NVARCHAR(MAX)
)
RETURNS BIT
AS
BEGIN
    DECLARE @result BIT = 1;

    ;WITH
    quantity_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS quantity
        FROM STRING_SPLIT(@quantity, ',')
    ),
    npv_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS npv
        FROM STRING_SPLIT(@net_product_value, ',')
    ),
    tt_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS tt
        FROM STRING_SPLIT(@total_tax, ',')
    ),
    tiv_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS tiv
        FROM STRING_SPLIT(@total_invoice_value, ',')
    ),
    joined AS (
        SELECT 
            q.quantity, n.npv, t.tt, i.tiv
        FROM quantity_cte q
        FULL OUTER JOIN npv_cte n ON q.rn = n.rn
        FULL OUTER JOIN tt_cte t ON q.rn = t.rn
        FULL OUTER JOIN tiv_cte i ON q.rn = i.rn
    )
    -- Check for mismatches
    IF EXISTS (
        SELECT 1
        FROM joined
        WHERE 
            quantity IS NULL OR npv IS NULL OR tt IS NULL OR tiv IS NULL
            OR ABS(npv + tt - tiv) > 0.0001
    )
        SET @result = 0;

    RETURN @result;
END
SELECT * 
FROM info 
WHERE dbo.CheckInvoiceValid(quantity, net_product_value, total_tax, total_invoice_value) = 1;




CREATE FUNCTION dbo.CheckInvoiceValid
(
    @quantity NVARCHAR(MAX),
    @net_product_value NVARCHAR(MAX),
    @total_tax NVARCHAR(MAX),
    @total_invoice_value NVARCHAR(MAX)
)
RETURNS BIT
AS
BEGIN
    DECLARE @result BIT = 1;

    ;WITH
    quantity_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS quantity
        FROM STRING_SPLIT(@quantity, ',')
    ),
    npv_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS npv
        FROM STRING_SPLIT(@net_product_value, ',')
    ),
    tt_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS tt
        FROM STRING_SPLIT(@total_tax, ',')
    ),
    tiv_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS tiv
        FROM STRING_SPLIT(@total_invoice_value, ',')
    ),
    joined AS (
        SELECT 
            q.quantity, n.npv, t.tt, i.tiv
        FROM quantity_cte q
        FULL OUTER JOIN npv_cte n ON q.rn = n.rn
        FULL OUTER JOIN tt_cte t ON q.rn = t.rn
        FULL OUTER JOIN tiv_cte i ON q.rn = i.rn
    )
    -- Set @result to 0 if any row mismatches
    SELECT @result = CASE 
        WHEN EXISTS (
            SELECT 1
            FROM joined
            WHERE 
                quantity IS NULL OR npv IS NULL OR tt IS NULL OR tiv IS NULL
                OR ABS(npv + tt - tiv) > 0.0001
        )
        THEN 0
        ELSE 1
    END

    RETURN @result;
END

https://teams.microsoft.com/l/meetup-join/19%3ameeting_NTMzZGI4MjAtZmFiYi00OTA3LWEwNzAtYjhjMjhjYzYyOGVj%40thread.v2/0?context=%7b%22Tid%22%3a%2237d6c2dc-4813-48e3-a842-28cab8171c98%22%2c%22Oid%22%3a%22aab2be42-5c5c-4cb1-ac4e-f1d52be96395%22%7d



CREATE FUNCTION dbo.NewTotalTax
(
    @quantity NVARCHAR(MAX),
    @net_product_value NVARCHAR(MAX),
    @total_tax NVARCHAR(MAX),
    @total_invoice_value NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @result NVARCHAR(MAX) = '';
    DECLARE @sz INT;

    -- Split CSVs and add row numbers
    ;WITH
    quantity_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS quantity
        FROM STRING_SPLIT(@quantity, ',')
    ),
    npv_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS npv
        FROM STRING_SPLIT(@net_product_value, ',')
    ),
    tiv_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS tiv
        FROM STRING_SPLIT(@total_invoice_value, ',')
    ),
    tt_cte AS (
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS rn, TRY_CAST(value AS FLOAT) AS tt
        FROM STRING_SPLIT(@total_tax, ',')
    )
    SELECT @sz = COUNT(*) FROM quantity_cte;

    -- Check sizes: npv & tiv must have sz rows; tt must have 2*sz rows
    IF (
        (SELECT COUNT(*) FROM npv_cte) != @sz
        OR (SELECT COUNT(*) FROM tiv_cte) != @sz
        OR (SELECT COUNT(*) FROM tt_cte) != 2*@sz
    )
    BEGIN
        RETURN @total_tax;
    END

    DECLARE @i INT = 1;  -- index over tt_cte (1-based)
    DECLARE @j INT = 1;  -- index over npv & tiv (1-based)

    DECLARE @tt1 FLOAT;
    DECLARE @tt2 FLOAT;
    DECLARE @npv FLOAT;
    DECLARE @tiv FLOAT;
    DECLARE @temp FLOAT;

    WHILE @i <= 2*@sz
    BEGIN
        SELECT @tt1 = tt FROM tt_cte WHERE rn = @i;
        SELECT @tt2 = tt FROM tt_cte WHERE rn = @i+1;
        SELECT @npv = npv FROM npv_cte WHERE rn = @j;
        SELECT @tiv = tiv FROM tiv_cte WHERE rn = @j;

        -- validate: tt[i]==tt[i+1] and abs(tt[i]+tt[i+1]+npv - tiv) <=0.01
        IF @tt1 IS NULL OR @tt2 IS NULL OR @npv IS NULL OR @tiv IS NULL 
            OR ABS(@tt1 - @tt2) > 0.0001
            OR ABS(@tt1 + @tt2 + @npv - @tiv) > 0.01
        BEGIN
            RETURN @total_tax;
        END

        SET @temp = ROUND(@tt1 + @tt2, 2);  -- round sum to 2 decimal places

        -- Build CSV string
        SET @result = @result + 
            CASE WHEN LEN(@result) > 0 THEN ',' ELSE '' END 
            + FORMAT(@temp, '0.00');

        SET @i = @i + 2;
        SET @j = @j + 1;
    END

    RETURN @result;
END



























CREATE FUNCTION dbo.NewTotalTax
(
    @quantity NVARCHAR(MAX),
    @net_product_value NVARCHAR(MAX),
    @total_tax NVARCHAR(MAX),
    @total_invoice_value NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @result NVARCHAR(MAX) = '';
    DECLARE @sz INT;

    -- Declare table variables
    DECLARE @quantity_tbl TABLE (rn INT PRIMARY KEY, quantity FLOAT);
    DECLARE @npv_tbl TABLE (rn INT PRIMARY KEY, npv FLOAT);
    DECLARE @tiv_tbl TABLE (rn INT PRIMARY KEY, tiv FLOAT);
    DECLARE @tt_tbl TABLE (rn INT PRIMARY KEY, tt FLOAT);

    -- Insert data with row numbers
    INSERT INTO @quantity_tbl(rn, quantity)
    SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)), TRY_CAST(value AS FLOAT)
    FROM STRING_SPLIT(@quantity, ',');

    INSERT INTO @npv_tbl(rn, npv)
    SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)), TRY_CAST(value AS FLOAT)
    FROM STRING_SPLIT(@net_product_value, ',');

    INSERT INTO @tiv_tbl(rn, tiv)
    SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)), TRY_CAST(value AS FLOAT)
    FROM STRING_SPLIT(@total_invoice_value, ',');

    INSERT INTO @tt_tbl(rn, tt)
    SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)), TRY_CAST(value AS FLOAT)
    FROM STRING_SPLIT(@total_tax, ',');

    SELECT @sz = COUNT(*) FROM @quantity_tbl;

    -- Check sizes
    IF (
        (SELECT COUNT(*) FROM @npv_tbl) != @sz
        OR (SELECT COUNT(*) FROM @tiv_tbl) != @sz
        OR (SELECT COUNT(*) FROM @tt_tbl) != 2*@sz
    )
    BEGIN
        RETURN @total_tax;
    END

    DECLARE @i INT = 1;
    DECLARE @j INT = 1;

    DECLARE @tt1 FLOAT;
    DECLARE @tt2 FLOAT;
    DECLARE @npv FLOAT;
    DECLARE @tiv FLOAT;
    DECLARE @temp FLOAT;

    WHILE @i <= 2*@sz
    BEGIN
        SELECT @tt1 = tt FROM @tt_tbl WHERE rn = @i;
        SELECT @tt2 = tt FROM @tt_tbl WHERE rn = @i+1;
        SELECT @npv = npv FROM @npv_tbl WHERE rn = @j;
        SELECT @tiv = tiv FROM @tiv_tbl WHERE rn = @j;

        -- validate
        IF @tt1 IS NULL OR @tt2 IS NULL OR @npv IS NULL OR @tiv IS NULL
            OR ABS(@tt1 - @tt2) > 0.0001
            OR ABS(@tt1 + @tt2 + @npv - @tiv) > 0.01
        BEGIN
            RETURN @total_tax;
        END

        SET @temp = ROUND(@tt1 + @tt2, 2);

        SET @result = @result + 
            CASE WHEN LEN(@result) > 0 THEN ',' ELSE '' END 
            + FORMAT(@temp, '0.00');

        SET @i = @i + 2;
        SET @j = @j + 1;
    END

    RETURN @result;
END





CREATE OR ALTER FUNCTION dbo.NewTotalTaxInline (
    @id INT,
    @quantity NVARCHAR(MAX),
    @net_product_value NVARCHAR(MAX),
    @total_tax NVARCHAR(MAX),
    @total_invoice_value NVARCHAR(MAX)
)
RETURNS TABLE
AS
RETURN
WITH
q AS (
    SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) rn, TRY_CAST(value AS FLOAT) val
    FROM STRING_SPLIT(@quantity, ',')
),
npv AS (
    SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) rn, TRY_CAST(value AS FLOAT) val
    FROM STRING_SPLIT(@net_product_value, ',')
),
tiv AS (
    SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) rn, TRY_CAST(value AS FLOAT) val
    FROM STRING_SPLIT(@total_invoice_value, ',')
),
tt AS (
    SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) rn, TRY_CAST(value AS FLOAT) val
    FROM STRING_SPLIT(@total_tax, ',')
),
pair AS (
    SELECT
        q.rn,
        npv.val AS npv,
        tiv.val AS tiv,
        t1.val AS tt1,
        t2.val AS tt2
    FROM q
    JOIN npv ON q.rn = npv.rn
    JOIN tiv ON q.rn = tiv.rn
    JOIN tt t1 ON t1.rn = q.rn * 2 - 1
    JOIN tt t2 ON t2.rn = q.rn * 2
),
validated AS (
    SELECT *,
        CASE 
            WHEN tt1 IS NULL OR tt2 IS NULL OR npv IS NULL OR tiv IS NULL
                 OR ABS(tt1 - tt2) > 0.0001
                 OR ABS(tt1 + tt2 + npv - tiv) > 0.01
            THEN 0 ELSE 1
        END AS is_valid
    FROM pair
)
SELECT 
    @id AS id,
    CASE 
        WHEN MIN(is_valid) = 0 THEN @total_tax
        ELSE 
            STRING_AGG(FORMAT(ROUND(tt1+tt2,2),'0.00'), ',') 
                WITHIN GROUP (ORDER BY rn)
    END AS new_total_tax
FROM validated;



SELECT i.id, i.total_tax AS old_total_tax, v.new_total_tax
FROM info4 i
CROSS APPLY dbo.NewTotalTaxInline(
    i.id, 
    i.quantity, 
    i.net_product_value, 
    i.total_tax, 
    i.total_invoice_value
) v;
